/*
	A basic extension of the java.awt.Dialog class
 */

import java.awt.*;

import Yourdon.*;
public class VerificarDialog extends Dialog
{
    public VerificarDialog (Frame parent, Diagrama diagrama)
    {
        this(parent, true);

        if (diagrama != null)
        {
            this.setTitle("Verificar diagrama: " + diagrama.processo.getNomeCompleto());
            this.verificarDiagrama(diagrama);
        }
    }
    protected void verificarProjeto (Projeto projeto)
    {
        InfoErroDiagrama    info;
        int                 total_erros = 0;

        textArea1.append("\nVerificando modelo essencial do projeto...");

        textArea1.append("\n\nVerificando diagrama de contexto...");
        info = projeto.contexto.verificarDiagrama(false);
        total_erros = total_erros + this.exibirErros (info);

        textArea1.append("\n\nVerificando diagramas de fluxo de dados (todos os níveis)...");
        info = projeto.dfd0.verificarDiagrama(true);
        total_erros = total_erros + this.exibirErros (info);
        
        if (total_erros > 0)
            textArea1.append("\n\n\nTotal de inconsistências: " + total_erros);
        else
            textArea1.append("\n\n\nNenhuma inconsistência foi encontrada.");
    }

    protected void verificarDiagrama (Diagrama diagrama)
    {
        InfoErroDiagrama    info;
        int                 total_erros = 0;
        
        if (diagrama == null) return;
        
        textArea1.append("\nVerificando diagrama...");

        info = diagrama.verificarDiagrama(false);

        total_erros = total_erros + this.exibirErros (info);
        
        if (total_erros > 0)
            textArea1.append("\n\n\nTotal de inconsistências: " + total_erros);
        else
            textArea1.append("\n\n\nNenhuma inconsistência foi encontrada.");
            
    }
    protected Projeto projeto;
    public VerificarDialog (Frame parent, Projeto projeto)
    {
        this(parent, true);

        if (projeto != null)
        {
            this.setTitle("Verificar projeto: " + projeto.getNome());
            this.verificarProjeto(projeto);
        }
    }
	public VerificarDialog(Frame parent, boolean modal)
	{
		super(parent, modal);

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(new BorderLayout(0,0));
		setSize(430,270);
		setBackground(new Color(12632256));
		panel1 = new java.awt.Panel();
		panel1.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		panel1.setBounds(0,237,430,10);
		add("South", panel1);
		okButton = new java.awt.Button();
		okButton.setLabel("        Ok        ");
		okButton.setBounds(176,5,77,23);
		okButton.setBackground(new Color(12632256));
		panel1.add(okButton);
		textArea1 = new java.awt.TextArea();
		textArea1.setEditable(false);
		textArea1.setBounds(0,0,430,237);
		add("Center", textArea1);
		setTitle("VerificarDialog");
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		okButton.addActionListener(lSymAction);
		//}}
	}
	
	public void addNotify()
	{
  	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();

		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;


	public VerificarDialog(Frame parent, String title, boolean modal)
	{
		this(parent, modal);
		setTitle(title);
	}

    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			Rectangle bounds = getParent().getBounds();
			Rectangle abounds = getBounds();
	
			setLocation(bounds.x + (bounds.width - abounds.width)/ 2,
				 bounds.y + (bounds.height - abounds.height)/2);
		}
		super.setVisible(b);
	}

	//{{DECLARE_CONTROLS
	java.awt.Panel panel1;
	java.awt.Button okButton;
	java.awt.TextArea textArea1;
	//}}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == VerificarDialog.this)
				Dialog1_WindowClosing(event);
		}
	}
	
	void Dialog1_WindowClosing(java.awt.event.WindowEvent event)
	{
		setVisible(false);
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == okButton)
				okButton_ActionPerformed(event);
		}
	}

	void okButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
        this.dispose();
	}
	
    protected int exibirErros (InfoErroDiagrama info)
    {
        int                 erros = 0;
        
        if (info.qtdeEntidades > 0)
        {
            erros = erros + info.qtdeEntidades;
            textArea1.append("\n\n\tAtenção: existe(m) " + info.qtdeEntidades + " entidade(s) não relacionada(s).");
        }

        if (info.qtdeDepositos > 0)
        {
            erros = erros + info.qtdeDepositos;
            textArea1.append("\n\n\tAtenção: existe(m) " + info.qtdeDepositos + " depósito(s) não estão relacionado(s).");
        }

        if (info.qtdeProcessos > 0)
        {
            erros = erros + info.qtdeProcessos;
            textArea1.append("\n\n\tAtenção: existe(m) " + info.qtdeProcessos + " processo(s) não relacionado(s).");
        }
        
        return erros;            
    }

}
